#!/bin/bash
set -e

echo "üöÄ Deploying CloudOps Infrastructure..."

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Check prerequisites
echo -e "${BLUE}üîç Checking prerequisites...${NC}"

if ! command -v terraform &> /dev/null; then
    echo -e "${RED}‚ùå Terraform is not installed${NC}"
    exit 1
fi

if ! command -v aws &> /dev/null; then
    echo -e "${RED}‚ùå AWS CLI is not installed${NC}"
    exit 1
fi

# Check AWS credentials
if ! aws sts get-caller-identity &> /dev/null; then
    echo -e "${RED}‚ùå AWS credentials not configured${NC}"
    exit 1
fi

echo -e "${GREEN}‚úÖ Prerequisites check passed${NC}"

# Initialize Terraform
echo -e "${YELLOW}üèóÔ∏è  Initializing Terraform...${NC}"
terraform init

# Validate configuration
echo -e "${YELLOW}üîç Validating configuration...${NC}"
terraform validate

if [ $? -ne 0 ]; then
    echo -e "${RED}‚ùå Terraform validation failed${NC}"
    exit 1
fi

echo -e "${GREEN}‚úÖ Configuration validated${NC}"

# Plan deployment
echo -e "${YELLOW}üìã Planning deployment...${NC}"
terraform plan -out=tfplan

# Show plan summary
echo ""
echo -e "${BLUE}üìä Deployment Summary:${NC}"
echo "This will create the following resources:"
echo "- DynamoDB table for incidents"
echo "- Lambda functions for API and processing"
echo "- API Gateway for REST API"
echo "- Cognito User Pool for authentication"
echo "- S3 bucket and CloudFront for frontend"
echo "- EventBridge rules for event processing"
echo "- CloudWatch dashboards and alarms"
echo ""

# Ask for confirmation
read -p "Deploy the infrastructure? (y/N): " confirm
if [[ $confirm == [yY] || $confirm == [yY][eE][sS] ]]; then
    echo -e "${YELLOW}üèóÔ∏è  Applying configuration...${NC}"
    terraform apply tfplan
    
    echo ""
    echo -e "${GREEN}‚úÖ Infrastructure deployed successfully!${NC}"
    echo ""
    echo -e "${BLUE}üìã Important outputs:${NC}"
    terraform output
    
    echo ""
    echo -e "${YELLOW}üîó Next steps:${NC}"
    echo "1. Copy the values below to ../frontend/.env:"
    echo ""
    echo "   VITE_API_GATEWAY_URL=$(terraform output -raw api_gateway_url 2>/dev/null || echo 'CHECK_TERRAFORM_OUTPUT')"
    echo "   VITE_COGNITO_USER_POOL_ID=$(terraform output -raw cognito_user_pool_id 2>/dev/null || echo 'CHECK_TERRAFORM_OUTPUT')"
    echo "   VITE_COGNITO_CLIENT_ID=$(terraform output -raw cognito_client_id 2>/dev/null || echo 'CHECK_TERRAFORM_OUTPUT')"
    echo "   VITE_AWS_REGION=$(terraform output -raw aws_region 2>/dev/null || echo 'us-east-1')"
    echo ""
    echo "2. Build and deploy the frontend:"
    echo "   cd ../frontend"
    echo "   npm run build"
    echo "   ./deploy.sh"
    echo ""
    echo "3. Access your dashboard at the CloudFront URL above"
    
    # Create a helper file for frontend env
    cat > ../frontend/.env.deploy << EOF
# Generated by Terraform - copy these values to your .env file
VITE_API_GATEWAY_URL=$(terraform output -raw api_gateway_url 2>/dev/null || echo 'CHECK_TERRAFORM_OUTPUT')
VITE_COGNITO_USER_POOL_ID=$(terraform output -raw cognito_user_pool_id 2>/dev/null || echo 'CHECK_TERRAFORM_OUTPUT')
VITE_COGNITO_CLIENT_ID=$(terraform output -raw cognito_client_id 2>/dev/null || echo 'CHECK_TERRAFORM_OUTPUT')
VITE_AWS_REGION=$(terraform output -raw aws_region 2>/dev/null || echo 'us-east-1')
VITE_APP_NAME=CloudOps Demo
VITE_ENVIRONMENT=demo
VITE_ENABLE_DEMO_DATA=true

# S3 and CloudFront for deployment
S3_BUCKET_NAME=$(terraform output -raw s3_bucket_name 2>/dev/null || echo 'CHECK_TERRAFORM_OUTPUT')
CLOUDFRONT_DISTRIBUTION_ID=$(terraform output -raw cloudfront_distribution_id 2>/dev/null || echo 'CHECK_TERRAFORM_OUTPUT')
EOF
    
    echo -e "${GREEN}üìù Environment file created at ../frontend/.env.deploy${NC}"
    
else
    echo -e "${YELLOW}‚ùå Deployment cancelled${NC}"
    rm -f tfplan
fi
